package sesshash

import s "strings"
import "crypto/sha1"
import "encoding/binary"
import "bytes"

func SessOrd(key string, size int) (int)  {
    var akey string
    ekey := make([]byte,24,24)
    var keylen int
    var dividend uint64
    akey = (s.ToUpper(key) + "                        ")[0:24]
    if s.HasPrefix(akey,"DX") {
        keylen = 8
    } else {
        keylen = 24
    }
    ekey = xlate(akey)
    h := sha1.Sum(ekey[0:keylen])
    buf := bytes.NewBuffer(h[4:12])
    binary.Read(buf, binary.BigEndian, &dividend)
    dividend = (dividend << 1) >> 1
    return int(dividend % uint64(size))
}

func xlate(s string) ([]byte) {
    const ebcdic string = "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40" +
                          "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40" +
                          "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40" +
                          "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\x40\x40\x40\x40\x40\x40" +
                          "\x40\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xd1\xd2\xd3\xd4\xd5\xd6" +
                          "\xd7\xd8\xd9\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\x40\x40\x40\x40\x40" +
                          "\x40\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xd1\xd2\xd3\xd4\xd5\xd6" +
                          "\xd7\xd8\xd9\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\x40\x40\x40\x40\x40" +
                          "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40" +
                          "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40" +
                          "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40" +
                          "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40" +
                          "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40" +
                          "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40" +
                          "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40" +
                          "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40"
    var i int
    var xr int
    var yr int
    rs := make([]byte,24,24)
    for i = 0 ; i < len(s) ; i++ {
        xr = int(s[i])
        yr = int(ebcdic[xr])
        rs[i] = byte(yr)
    }
    return rs
}
